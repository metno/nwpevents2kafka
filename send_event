#!/usr/bin/python

import sys
from optparse import OptionParser
import datetime
import json
import os
import subprocess

try:  # py3
    from shlex import quote
except ImportError:  # py2
    from pipes import quote


def get_loginhost(server_list):
    for server in server_list:
        process = subprocess.Popen("ssh -o ConnectTimeout=45 kafka@" + server + " /bin/true", shell=True,
                                   stdout=subprocess.PIPE, stderr=subprocess.STDOUT)
        output,stderr = process.communicate()
        status = process.poll()
        if status == 0:
            return server
    return None


parser = OptionParser()
parser.add_option("-c", "--cycle", dest='cycle', help='Analysis time')
parser.add_option("-t", "--time-sendt", dest='time_sendt', help='The time(s) we tried to send this message')
parser.add_option("-n", "--event-name", dest='event_name', help='model_start, model_end, etc')
parser.add_option("-d", "--event-target", dest='event_target', help='Which target is this about (ie. model-name)')
parser.add_option("-s", "--event-source", dest='event_source', help='What sendt this event')
parser.add_option("-k", "--keyvalue-pairs", dest='kvpairs', help='Optional additional key value pairs')
parser.add_option("-q", "--queue-topic", dest='topic', help='Optional topic name. Defaults to "modelevents"')

utc_datetime = datetime.datetime.utcnow()
kvpairs = {}
try:
    (options, args) = parser.parse_args()

    if options.cycle is None:
        #options.cycle = raw_input('model_cycle:')
        options.cycle = utc_datetime.strftime("%H")
    if options.time_sendt is None:
        #options.message_sendt_at = raw_input('sendt_message_at:')
        options.time_sendt = utc_datetime.strftime("%Y-%m-%dT%H:%M:%SZ")

    if options.event_name is None:
        options.event_name = raw_input('event_name:')

    if options.event_target is None:
        options.event_target = raw_input('event_target:')

    if options.event_source is None:
        options.event_source = raw_input('event_source:')
    
    if options.kvpairs:
        arr = options.kvpairs.split(',')
        for e in arr:
            kv=e.split('=')
            kvpairs[kv[0]] = kv[1]

    if options.topic is None:
        options.topic = "modelevents"

except:
    parser.print_help()
    sys.exit(-1)



termin = utc_datetime.strftime("%Y%m%dT") + options.cycle + "Z"
payload = {
    'termin':  termin ,
    'event_name': options.event_name,
    'event_target': options.event_target,
    'time_sendt': options.time_sendt,
    'event_source': options.event_source
}

# Add abritary key value paris
for k in kvpairs:
    payload[k] = kvpairs[k]

scriptdir = os.path.dirname(os.path.abspath(__file__))
logfile = scriptdir + "/" + "events.log"


#console_producer = "/home/ubuntu/kafka/kafka-0.10.0.0-src/bin/kafka-console-producer.sh"
#server_list = [
#               'os-157-249-176-113.ares.met.no',
#               ]

console_producer = "/opt/kafka/kafka_2.11-0.10.0.0/bin/kafka-console-producer.sh"
server_list = [
               'os-157-249-176-210.ares.met.no',
               'os-157-249-176-211.ares.met.no',
               'os-157-249-176-212.ares.met.no',
               'os-157-249-176-213.ares.met.no',
               'os-157-249-176-214.ares.met.no',
               ]

broker_list=""
for server in server_list:
    broker_list += server + ":9092," 

login_host = get_loginhost(server_list)

sendcmd = """
 ssh -T kafka@""" + login_host + """ 2>&1 > /dev/null <<'EOF'
echo """ + quote(json.dumps(payload)) + """ | """ + console_producer + """ --broker-list """ + broker_list + """ --topic """ + options.topic + """  2&>1 > /dev/null
EOF
"""
if login_host is not None:
    retval = os.system(sendcmd + " 2>&1 > /dev/null")
    if retval != 0:
        os.system("echo send event failed: " + retval + " >> " + logfile)
    else:
        logcmd = "echo " + quote(json.dumps(payload)) + " >> " + logfile
        os.system(logcmd)
else:
    os.system("echo No ssh login hosts available! >>"   + logfile )


# "Rotate" log.
os.system("tail -100 " + logfile + " > " + logfile + ".tmp")
os.system("mv " + logfile + ".tmp " + logfile)
