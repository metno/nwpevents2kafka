#!/usr/bin/python

import sys
from optparse import OptionParser
import datetime
import json
import os
import subprocess
import random
import socket
import smtplib
import time

try:  # py3
    from shlex import quote
except ImportError:  # py2
    from pipes import quote


def print_version():
    send_event_version = "alfa-baluba"
    print("%s version: %s" % (sys.argv[0], send_event_version))

for x in xrange(len(sys.argv)):
    if sys.argv[x-1] == '-v':
        print_version()
        sys.exit(0)

    if sys.argv[x-1] == '--version':
        print_version()
        sys.exit(0)

logfile = "/tmp/" + "events.log-" + os.environ['USER']


def get_loginhost(server_list):
    for server in server_list:


        cmd = "ssh  -o ConnectionAttempts=2 -o StrictHostKeyChecking=no -o ConnectTimeout=4 kafka@" + server + " /bin/true"
        print "Doing %s" % cmd
        process = subprocess.Popen(cmd, shell=True,
                                   stdout=subprocess.PIPE, 
                                   stderr=subprocess.STDOUT, 
                                   close_fds=True)
        output, stderr = process.communicate()
        status = process.poll()
        if ( status != 0 ):
            print(output.decode("utf-8"))
            print(stderr)
            return None
        else:
            return server

def send_mail(body):
    sender = os.environ['USER'] + "@" + socket.gethostname()
    receivers = ",".join(['espenm@met.no'])

    message = """From: <%s>
To: %s
Subject: Error sending event from %s@%s

%s
""" % (sender, os.environ['USER'], socket.gethostname(), receivers, body)

    try:
        smtpObj = smtplib.SMTP('localhost')
        smtpObj.sendmail(sender, receivers, message)
    except smtplib.SMTPException:
        os.system("echo Error: unable to send emai " + " >> " + logfile)


parser = OptionParser()
parser.add_option("-c", "--cycle", dest='cycle', help='Analysis time')
parser.add_option("-t", "--time-sendt", dest='time_sendt', help='The time(s) we tried to send this message')
parser.add_option("-n", "--event-name", dest='event_name', help='model_start, model_end, etc')
parser.add_option("-d", "--event-target", dest='event_target', help='Which target is this about (ie. model-name)')
parser.add_option("-s", "--event-source", dest='event_source', help='What sendt this event')
parser.add_option("-k", "--keyvalue-pairs", dest='kvpairs', help='Optional additional key value pairs')
parser.add_option("-q", "--queue-topic", dest='topic', help='Optional topic name. Defaults to "modelevents"')
parser.add_option("-v", "--version", dest="version", help='Version')
#parser.add_option("-v", "--version")

utc_datetime = datetime.datetime.utcnow()
kvpairs = {}
try:
    (options, args) = parser.parse_args()

    if options.cycle is None:
        #options.cycle = raw_input('model_cycle:')
        options.cycle = utc_datetime.strftime("%H")
    if options.time_sendt is None:
        #options.message_sendt_at = raw_input('sendt_message_at:')
        options.time_sendt = utc_datetime.strftime("%Y-%m-%dT%H:%M:%SZ")

    if options.event_name is None:
        options.event_name = raw_input('event_name:')

    if options.event_target is None:
        options.event_target = raw_input('event_target:')

    if options.event_source is None:
        options.event_source = raw_input('event_source:')

    if options.kvpairs:
        arr = options.kvpairs.split(',')
        for e in arr:
            kv = e.split('=')
            kvpairs[kv[0]] = kv[1]

    if options.topic is None:
        options.topic = "modelevents"


except:
    parser.print_help()
    sys.exit(-1)

termin = utc_datetime.strftime("%Y%m%dT") + options.cycle + "Z"
payload = {
    'termin':  termin,
    'event_name': options.event_name,
    'event_target': options.event_target,
    'time_sendt': options.time_sendt,
    'event_source': options.event_source,
    'cycle': options.cycle
}

# Add abritary key value paris
for k in kvpairs:
    payload[k] = kvpairs[k]

scriptdir = os.path.dirname(os.path.abspath(__file__))

#console_producer = "/home/ubuntu/kafka/kafka-0.10.0.0-src/bin/kafka-console-producer.sh"
#server_list = [
#               'os-157-249-176-113.ares.met.no',
#               ]

console_producer = "/opt/kafka/kafka_2.11-0.10.0.0/bin/kafka-console-producer.sh"
server_list = [
    'os-157-249-176-210.ares.met.no',
    'os-157-249-176-211.ares.met.no',
    'os-157-249-176-212.ares.met.no',
    'os-157-249-176-213.ares.met.no',
    'os-157-249-176-214.ares.met.no',
]

random.shuffle(server_list)
broker_list = ""
for server in server_list:
    broker_list += server + ":9092,"

login_host = None
for x in range(0, 6):
    login_host = get_loginhost(server_list)
    if login_host is None:
        time.sleep(10)
    else:
        break

sendcmd = """
ssh -o StrictHostKeyChecking=no kafka@""" + login_host + """ /bin/bash <<'EOF'
set -o pipefail; echo """ + quote(json.dumps(payload)) + """ | """ + console_producer + """ --broker-list """ + broker_list + """ --topic """ + options.topic + """ --request-required-acks 1  --sync
EOF
"""

if login_host is None:
    send_mail("send event failed. No ssh login hosts available!\n" + quote(json.dumps(payload)) + "\n The command to be run was: " + sendcmd)
    print("ERROR send_even failed. No ssh login hosts available!. payload was: %s" % quote(json.dumps(payload)))
    exit(-1)

#print sendcmd

for tryno in range(0, 5):
    process = subprocess.Popen(sendcmd, shell=True,
                               stdout=subprocess.PIPE,
                               stderr=subprocess.STDOUT,
                               close_fds=True)
    output, stderr = process.communicate()
    status = process.poll()
    
    if (status != 0):
        print "ERROR: Send_event failed: %d. Retrying" % (status)
        time.sleep(3)
    else:
        break

#print(output.decode("utf-8"))
#print(stderr)
if status != 0:
    send_mail("send event command failed. The command was: \n" + sendcmd 
              + "\n output: " + str(output) 
              + "\n stderr: " + str(stderr)
              + "\n status: " + str(status) )
        
exit(status)

#retval = os.system(sendcmd)
#if retval != 0:
#    os.system("echo send event failed: " + retval + " >> " + logfile)
#    send_mail("send event command failed. The command was: \n" + sendcmd)
#    exit(retval)
#else:
#    logcmd = "echo " + quote(json.dumps(payload)) + " >> " + logfile
#    os.system(logcmd)

# "Rotate" log.
#os.system("tail -100 " + logfile + " > " + logfile + ".tmp")
#os.system("mv " + logfile + ".tmp " + logfile)
